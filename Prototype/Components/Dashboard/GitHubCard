
import React, { useState, useEffect, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { InvokeLLM } from "@/integrations/Core";
import { Github, Star, GitFork, Users, Heart, Search } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function GitHubCard({ isDark, refreshing, isFavorite, onToggleFavorite }) {
  const [githubData, setGithubData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [username, setUsername] = useState("octocat");
  const [searchUser, setSearchUser] = useState("");

  const fetchGitHubData = useCallback(async (user = username) => {
    setLoading(true);
    try {
      const result = await InvokeLLM({
        prompt: `Get GitHub user profile information for username "${user}". I need their avatar, bio, follower count, following count, public repo count, and top 3 popular repositories with their stars and description. Format as JSON.`,
        add_context_from_internet: true,
        response_json_schema: {
          type: "object",
          properties: {
            username: { type: "string" },
            avatar: { type: "string" },
            bio: { type: "string" },
            followers: { type: "number" },
            following: { type: "number" },
            publicRepos: { type: "number" },
            topRepos: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  name: { type: "string" },
                  description: { type: "string" },
                  stars: { type: "number" },
                  language: { type: "string" }
                }
              }
            }
          }
        }
      });
      setGithubData(result);
      setUsername(user); // Set the username to the one that was successfully fetched
    } catch (error) {
      console.error("GitHub fetch error:", error);
      setGithubData(null); // Clear data on error
    }
    setLoading(false);
  }, [username]); // username is a dependency because it's used as a default parameter

  const handleSearch = () => {
    if (searchUser.trim()) {
      fetchGitHubData(searchUser.trim());
      setSearchUser("");
    }
  };

  useEffect(() => {
    fetchGitHubData();
  }, [fetchGitHubData]); // fetchGitHubData is a dependency because it's used inside the effect

  useEffect(() => {
    if (refreshing) {
      fetchGitHubData();
    }
  }, [refreshing, fetchGitHubData]); // fetchGitHubData is a dependency because it's used inside the effect

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3, delay: 0.1 }}
      className="relative group"
    >
      <Card className={`${
        isDark 
          ? 'bg-gradient-to-br from-gray-800/20 via-gray-700/10 to-gray-800/20 border-gray-500/20 backdrop-blur-xl' 
          : 'bg-gradient-to-br from-gray-50 to-gray-100 border-gray-200/50 backdrop-blur-xl'
      } transition-all duration-300 hover:scale-105 overflow-hidden`}>
        <div className="absolute inset-0 bg-gradient-to-br from-gray-500/5 to-gray-700/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        
        <CardHeader className="flex flex-row items-center justify-between pb-2 relative">
          <div className="flex items-center gap-2">
            <div className="p-2 rounded-lg bg-gradient-to-br from-gray-700 to-gray-900">
              <Github className="w-4 h-4 text-white" />
            </div>
            <CardTitle className={`text-lg font-semibold ${
              isDark ? 'text-white' : 'text-gray-800'
            }`}>
              GitHub
            </CardTitle>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={onToggleFavorite}
            className={`${
              isFavorite 
                ? 'text-red-500 hover:text-red-600' 
                : isDark ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-600'
            }`}
          >
            <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
          </Button>
        </CardHeader>

        <CardContent className="space-y-4 relative">
          {/* Search */}
          <div className="flex gap-2">
            <Input
              placeholder="Enter GitHub username"
              value={searchUser}
              onChange={(e) => setSearchUser(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
              className={`${
                isDark 
                  ? 'bg-white/5 border-white/10 text-white placeholder:text-gray-400' 
                  : 'bg-white/80 border-gray-200 text-gray-800'
              }`}
            />
            <Button 
              onClick={handleSearch} 
              size="icon"
              className="bg-gradient-to-r from-gray-600 to-gray-800 hover:from-gray-700 hover:to-gray-900"
            >
              <Search className="w-4 h-4" />
            </Button>
          </div>

          <AnimatePresence mode="wait">
            {loading ? (
              <motion.div
                key="loading"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="space-y-3"
              >
                <div className="flex items-center gap-3">
                  <Skeleton className="w-12 h-12 rounded-full" />
                  <div className="space-y-2">
                    <Skeleton className="h-4 w-24" />
                    <Skeleton className="h-3 w-32" />
                  </div>
                </div>
                <Skeleton className="h-12 w-full" />
              </motion.div>
            ) : githubData ? (
              <motion.div
                key="data"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-4"
              >
                {/* User Profile */}
                <div className="flex items-start gap-3">
                  {githubData.avatar ? (
                    <img
                      src={githubData.avatar}
                      alt={`${githubData.username}'s avatar`}
                      className="w-12 h-12 rounded-full"
                    />
                  ) : (
                    <div className="w-12 h-12 rounded-full bg-gradient-to-br from-gray-300 to-gray-500 flex items-center justify-center text-white font-bold">
                      {githubData.username?.charAt(0).toUpperCase()}
                    </div>
                  )}
                  <div className="flex-1">
                    <div className={`font-semibold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                      @{githubData.username}
                    </div>
                    <div className={`text-sm ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                      {githubData.bio || "No bio available"}
                    </div>
                  </div>
                </div>

                {/* Stats */}
                <div className="grid grid-cols-3 gap-2">
                  <div className={`p-2 rounded-lg text-center ${isDark ? 'bg-white/5' : 'bg-white/50'}`}>
                    <div className={`font-bold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                      {githubData.followers}
                    </div>
                    <div className={`text-xs ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                      Followers
                    </div>
                  </div>
                  <div className={`p-2 rounded-lg text-center ${isDark ? 'bg-white/5' : 'bg-white/50'}`}>
                    <div className={`font-bold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                      {githubData.following}
                    </div>
                    <div className={`text-xs ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                      Following
                    </div>
                  </div>
                  <div className={`p-2 rounded-lg text-center ${isDark ? 'bg-white/5' : 'bg-white/50'}`}>
                    <div className={`font-bold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                      {githubData.publicRepos}
                    </div>
                    <div className={`text-xs ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                      Repos
                    </div>
                  </div>
                </div>

                {/* Top Repositories */}
                {githubData.topRepos && githubData.topRepos.length > 0 && (
                  <div className="space-y-2">
                    <div className={`text-sm font-medium ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                      Popular Repositories
                    </div>
                    {githubData.topRepos.slice(0, 2).map((repo, index) => (
                      <div 
                        key={index}
                        className={`p-3 rounded-lg ${isDark ? 'bg-white/5' : 'bg-white/50'}`}
                      >
                        <div className="flex items-center justify-between mb-1">
                          <div className={`font-medium ${isDark ? 'text-white' : 'text-gray-800'}`}>
                            {repo.name}
                          </div>
                          <div className="flex items-center gap-1">
                            <Star className="w-3 h-3 text-yellow-500" />
                            <span className={`text-xs ${isDark ? 'text-gray-300' : 'text-gray-600'}`}>
                              {repo.stars}
                            </span>
                          </div>
                        </div>
                        <div className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                          {repo.description || "No description"}
                        </div>
                        {repo.language && (
                          <Badge 
                            variant="outline" 
                            className={`mt-2 text-xs ${
                              isDark ? 'border-gray-600 text-gray-300' : 'border-gray-300 text-gray-600'
                            }`}
                          >
                            {repo.language}
                          </Badge>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </motion.div>
            ) : (
              <motion.div
                key="empty-or-error"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className={`text-center py-4 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}
              >
                {loading ? "Loading..." : "Enter a GitHub username to see data."}
              </motion.div>
            )}
          </AnimatePresence>
        </CardContent>
      </Card>
    </motion.div>
  );
}
