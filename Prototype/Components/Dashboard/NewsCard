import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { InvokeLLM } from "@/integrations/Core";
import { TrendingUp, ExternalLink, Heart, Clock } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function NewsCard({ isDark, refreshing, isFavorite, onToggleFavorite }) {
  const [newsData, setNewsData] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchNews = async () => {
    setLoading(true);
    try {
      const result = await InvokeLLM({
        prompt: `Get the latest 3 technology news headlines from today. Include headline, brief summary, source, and publication time. Format as JSON.`,
        add_context_from_internet: true,
        response_json_schema: {
          type: "object",
          properties: {
            articles: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  headline: { type: "string" },
                  summary: { type: "string" },
                  source: { type: "string" },
                  publishedAt: { type: "string" },
                  category: { type: "string" }
                }
              }
            }
          }
        }
      });
      setNewsData(result);
    } catch (error) {
      console.error("News fetch error:", error);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchNews();
  }, []);

  useEffect(() => {
    if (refreshing) {
      fetchNews();
    }
  }, [refreshing]);

  const timeAgo = (dateString) => {
    try {
      const date = new Date(dateString);
      const now = new Date();
      const hours = Math.floor((now - date) / (1000 * 60 * 60));
      if (hours < 1) return "Just now";
      if (hours < 24) return `${hours}h ago`;
      return `${Math.floor(hours / 24)}d ago`;
    } catch {
      return "Recently";
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3, delay: 0.7 }}
      className="relative group"
    >
      <Card className={`${
        isDark 
          ? 'bg-gradient-to-br from-red-900/20 via-pink-800/10 to-red-900/20 border-red-500/20 backdrop-blur-xl' 
          : 'bg-gradient-to-br from-red-50 to-pink-50 border-red-200/50 backdrop-blur-xl'
      } transition-all duration-300 hover:scale-105 overflow-hidden`}>
        <div className="absolute inset-0 bg-gradient-to-br from-red-500/5 to-pink-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        
        <CardHeader className="flex flex-row items-center justify-between pb-2 relative">
          <div className="flex items-center gap-2">
            <div className="p-2 rounded-lg bg-gradient-to-br from-red-500 to-pink-500">
              <TrendingUp className="w-4 h-4 text-white" />
            </div>
            <CardTitle className={`text-lg font-semibold ${
              isDark ? 'text-white' : 'text-gray-800'
            }`}>
              News
            </CardTitle>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={onToggleFavorite}
            className={`${
              isFavorite 
                ? 'text-red-500 hover:text-red-600' 
                : isDark ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-600'
            }`}
          >
            <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
          </Button>
        </CardHeader>

        <CardContent className="space-y-3 relative">
          <AnimatePresence mode="wait">
            {loading ? (
              <motion.div
                key="loading"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="space-y-3"
              >
                {Array(3).fill(0).map((_, i) => (
                  <div key={i} className="space-y-2">
                    <Skeleton className="h-4 w-full" />
                    <Skeleton className="h-3 w-3/4" />
                    <Skeleton className="h-3 w-1/2" />
                  </div>
                ))}
              </motion.div>
            ) : newsData?.articles ? (
              <motion.div
                key="data"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-3"
              >
                {newsData.articles.slice(0, 3).map((article, index) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className={`p-3 rounded-lg ${isDark ? 'bg-white/5' : 'bg-white/50'} hover:scale-105 transition-transform duration-200 group/article cursor-pointer`}
                  >
                    <div className="space-y-2">
                      <div className="flex items-start justify-between gap-2">
                        <div className={`font-medium text-sm leading-tight ${
                          isDark ? 'text-white' : 'text-gray-800'
                        }`}>
                          {article.headline}
                        </div>
                        <ExternalLink className={`w-3 h-3 flex-shrink-0 mt-1 opacity-0 group-hover/article:opacity-100 transition-opacity ${
                          isDark ? 'text-red-400' : 'text-red-600'
                        }`} />
                      </div>
                      
                      <div className={`text-xs leading-relaxed ${
                        isDark ? 'text-gray-300' : 'text-gray-600'
                      }`}>
                        {article.summary}
                      </div>

                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-2">
                          <Badge 
                            variant="outline" 
                            className={`text-xs ${
                              isDark 
                                ? 'border-red-500/30 text-red-300 bg-red-500/10' 
                                : 'border-red-300 text-red-600 bg-red-50'
                            }`}
                          >
                            {article.source || 'Tech News'}
                          </Badge>
                        </div>
                        <div className="flex items-center gap-1">
                          <Clock className={`w-3 h-3 ${
                            isDark ? 'text-gray-400' : 'text-gray-500'
                          }`} />
                          <span className={`text-xs ${
                            isDark ? 'text-gray-400' : 'text-gray-500'
                          }`}>
                            {timeAgo(article.publishedAt)}
                          </span>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
                
                <div className={`text-center text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'} mt-3`}>
                  Updated every 15 minutes
                </div>
              </motion.div>
            ) : (
              <motion.div
                key="error"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className={`text-center py-4 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}
              >
                Failed to load news
              </motion.div>
            )}
          </AnimatePresence>
        </CardContent>
      </Card>
    </motion.div>
  );
}
