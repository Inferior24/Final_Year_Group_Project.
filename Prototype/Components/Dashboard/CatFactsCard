import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { InvokeLLM } from "@/integrations/Core";
import { Heart, RefreshCw, Cat } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function CatFactsCard({ isDark, refreshing, isFavorite, onToggleFavorite }) {
  const [catFact, setCatFact] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchCatFact = async () => {
    setLoading(true);
    try {
      const result = await InvokeLLM({
        prompt: `Give me an interesting and fun fact about cats. Make it educational and engaging. Include the fact and a difficulty level (easy, medium, hard) based on how well-known it is. Format as JSON.`,
        response_json_schema: {
          type: "object",
          properties: {
            fact: { type: "string" },
            difficulty: { type: "string" },
            category: { type: "string" }
          }
        }
      });
      setCatFact(result);
    } catch (error) {
      console.error("Cat fact fetch error:", error);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchCatFact();
  }, []);

  useEffect(() => {
    if (refreshing) {
      fetchCatFact();
    }
  }, [refreshing]);

  const getDifficultyColor = (difficulty) => {
    switch (difficulty?.toLowerCase()) {
      case 'easy': return isDark ? 'bg-green-500/20 text-green-300 border-green-500/30' : 'bg-green-100 text-green-700 border-green-200';
      case 'medium': return isDark ? 'bg-yellow-500/20 text-yellow-300 border-yellow-500/30' : 'bg-yellow-100 text-yellow-700 border-yellow-200';
      case 'hard': return isDark ? 'bg-red-500/20 text-red-300 border-red-500/30' : 'bg-red-100 text-red-700 border-red-200';
      default: return isDark ? 'bg-purple-500/20 text-purple-300 border-purple-500/30' : 'bg-purple-100 text-purple-700 border-purple-200';
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3, delay: 0.8 }}
      className="relative group"
    >
      <Card className={`${
        isDark 
          ? 'bg-gradient-to-br from-pink-900/20 via-rose-800/10 to-pink-900/20 border-pink-500/20 backdrop-blur-xl' 
          : 'bg-gradient-to-br from-pink-50 to-rose-50 border-pink-200/50 backdrop-blur-xl'
      } transition-all duration-300 hover:scale-105 overflow-hidden`}>
        <div className="absolute inset-0 bg-gradient-to-br from-pink-500/5 to-rose-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        
        <CardHeader className="flex flex-row items-center justify-between pb-2 relative">
          <div className="flex items-center gap-2">
            <div className="p-2 rounded-lg bg-gradient-to-br from-pink-500 to-rose-500">
              <Heart className="w-4 h-4 text-white" />
            </div>
            <CardTitle className={`text-lg font-semibold ${
              isDark ? 'text-white' : 'text-gray-800'
            }`}>
              Cat Facts
            </CardTitle>
          </div>
          <div className="flex items-center gap-1">
            <Button
              variant="ghost"
              size="icon"
              onClick={onToggleFavorite}
              className={`${
                isFavorite 
                  ? 'text-red-500 hover:text-red-600' 
                  : isDark ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-600'
              }`}
            >
              <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              onClick={fetchCatFact}
              disabled={loading}
              className={`${isDark ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-600'}`}
            >
              <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />
            </Button>
          </div>
        </CardHeader>

        <CardContent className="relative">
          <AnimatePresence mode="wait">
            {loading ? (
              <motion.div
                key="loading"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="space-y-3"
              >
                <Skeleton className="h-4 w-full" />
                <Skeleton className="h-4 w-5/6" />
                <Skeleton className="h-4 w-3/4" />
                <Skeleton className="h-6 w-20 mt-3" />
              </motion.div>
            ) : catFact ? (
              <motion.div
                key="data"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-4"
              >
                <div className={`p-4 rounded-lg ${isDark ? 'bg-white/5' : 'bg-white/50'}`}>
                  <div className="flex items-start gap-3">
                    <Cat className={`w-5 h-5 mt-1 ${isDark ? 'text-pink-400' : 'text-pink-600'}`} />
                    <div className="space-y-3">
                      <div className={`${isDark ? 'text-white' : 'text-gray-800'} leading-relaxed`}>
                        {catFact.fact}
                      </div>
                    </div>
                  </div>
                </div>

                <div className="flex justify-between items-center">
                  <div className="flex gap-2">
                    <Badge 
                      className={getDifficultyColor(catFact.difficulty)}
                    >
                      {catFact.difficulty || 'Fun Fact'}
                    </Badge>
                    
                    {catFact.category && (
                      <Badge 
                        variant="outline"
                        className={`${
                          isDark 
                            ? 'border-pink-500/30 text-pink-300' 
                            : 'border-pink-300 text-pink-600'
                        }`}
                      >
                        {catFact.category}
                      </Badge>
                    )}
                  </div>
                  
                  <Button
                    onClick={fetchCatFact}
                    size="sm"
                    className="bg-gradient-to-r from-pink-500 to-rose-500 hover:from-pink-600 hover:to-rose-600"
                  >
                    New Fact
                  </Button>
                </div>
              </motion.div>
            ) : (
              <motion.div
                key="error"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className={`text-center py-4 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}
              >
                Failed to load cat fact
              </motion.div>
            )}
          </AnimatePresence>
        </CardContent>
      </Card>
    </motion.div>
  );
}
