import React, { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Skeleton } from "@/components/ui/skeleton";
import { InvokeLLM } from "@/integrations/Core";
import { Bitcoin, TrendingUp, TrendingDown, Heart } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function CryptoCard({ isDark, refreshing, isFavorite, onToggleFavorite }) {
  const [cryptoData, setCryptoData] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchCryptoData = async () => {
    setLoading(true);
    try {
      const result = await InvokeLLM({
        prompt: `Get current cryptocurrency prices for the top 5 cryptocurrencies by market cap (Bitcoin, Ethereum, BNB, Solana, XRP). I need current price in USD, 24h price change percentage, and market cap. Format as JSON array.`,
        add_context_from_internet: true,
        response_json_schema: {
          type: "object",
          properties: {
            cryptos: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  name: { type: "string" },
                  symbol: { type: "string" },
                  price: { type: "number" },
                  change24h: { type: "number" },
                  marketCap: { type: "number" }
                }
              }
            }
          }
        }
      });
      setCryptoData(result);
    } catch (error) {
      console.error("Crypto fetch error:", error);
    }
    setLoading(false);
  };

  useEffect(() => {
    fetchCryptoData();
  }, []);

  useEffect(() => {
    if (refreshing) {
      fetchCryptoData();
    }
  }, [refreshing]);

  const formatPrice = (price) => {
    if (price < 1) return `$${price.toFixed(4)}`;
    if (price < 100) return `$${price.toFixed(2)}`;
    return `$${price.toLocaleString()}`;
  };

  const formatMarketCap = (marketCap) => {
    if (marketCap >= 1e12) return `$${(marketCap / 1e12).toFixed(1)}T`;
    if (marketCap >= 1e9) return `$${(marketCap / 1e9).toFixed(1)}B`;
    if (marketCap >= 1e6) return `$${(marketCap / 1e6).toFixed(1)}M`;
    return `$${marketCap.toLocaleString()}`;
  };

  return (
    <motion.div
      initial={{ opacity: 0, scale: 0.95 }}
      animate={{ opacity: 1, scale: 1 }}
      transition={{ duration: 0.3, delay: 0.2 }}
      className="relative group"
    >
      <Card className={`${
        isDark 
          ? 'bg-gradient-to-br from-yellow-900/20 via-orange-800/10 to-yellow-900/20 border-yellow-500/20 backdrop-blur-xl' 
          : 'bg-gradient-to-br from-yellow-50 to-orange-50 border-yellow-200/50 backdrop-blur-xl'
      } transition-all duration-300 hover:scale-105 overflow-hidden`}>
        <div className="absolute inset-0 bg-gradient-to-br from-yellow-500/5 to-orange-500/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
        
        <CardHeader className="flex flex-row items-center justify-between pb-2 relative">
          <div className="flex items-center gap-2">
            <div className="p-2 rounded-lg bg-gradient-to-br from-yellow-500 to-orange-500">
              <Bitcoin className="w-4 h-4 text-white" />
            </div>
            <CardTitle className={`text-lg font-semibold ${
              isDark ? 'text-white' : 'text-gray-800'
            }`}>
              Crypto Prices
            </CardTitle>
          </div>
          <Button
            variant="ghost"
            size="icon"
            onClick={onToggleFavorite}
            className={`${
              isFavorite 
                ? 'text-red-500 hover:text-red-600' 
                : isDark ? 'text-gray-400 hover:text-gray-300' : 'text-gray-500 hover:text-gray-600'
            }`}
          >
            <Heart className={`w-4 h-4 ${isFavorite ? 'fill-current' : ''}`} />
          </Button>
        </CardHeader>

        <CardContent className="space-y-3 relative">
          <AnimatePresence mode="wait">
            {loading ? (
              <motion.div
                key="loading"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className="space-y-3"
              >
                {Array(4).fill(0).map((_, i) => (
                  <div key={i} className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <Skeleton className="w-8 h-8 rounded-full" />
                      <div className="space-y-1">
                        <Skeleton className="h-4 w-16" />
                        <Skeleton className="h-3 w-12" />
                      </div>
                    </div>
                    <div className="text-right space-y-1">
                      <Skeleton className="h-4 w-20" />
                      <Skeleton className="h-3 w-16" />
                    </div>
                  </div>
                ))}
              </motion.div>
            ) : cryptoData?.cryptos ? (
              <motion.div
                key="data"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                className="space-y-3"
              >
                {cryptoData.cryptos.slice(0, 4).map((crypto, index) => (
                  <motion.div
                    key={crypto.symbol}
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: index * 0.1 }}
                    className={`p-3 rounded-lg ${isDark ? 'bg-white/5' : 'bg-white/50'} hover:scale-105 transition-transform duration-200`}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-xs ${
                          isDark ? 'bg-gradient-to-br from-yellow-600 to-orange-600 text-white' : 'bg-gradient-to-br from-yellow-400 to-orange-400 text-white'
                        }`}>
                          {crypto.symbol?.slice(0, 2)}
                        </div>
                        <div>
                          <div className={`font-medium ${isDark ? 'text-white' : 'text-gray-800'}`}>
                            {crypto.symbol}
                          </div>
                          <div className={`text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'}`}>
                            {formatMarketCap(crypto.marketCap)}
                          </div>
                        </div>
                      </div>
                      <div className="text-right">
                        <div className={`font-semibold ${isDark ? 'text-white' : 'text-gray-800'}`}>
                          {formatPrice(crypto.price)}
                        </div>
                        <div className="flex items-center gap-1">
                          {crypto.change24h >= 0 ? (
                            <TrendingUp className="w-3 h-3 text-green-500" />
                          ) : (
                            <TrendingDown className="w-3 h-3 text-red-500" />
                          )}
                          <span className={`text-xs ${
                            crypto.change24h >= 0 ? 'text-green-500' : 'text-red-500'
                          }`}>
                            {crypto.change24h >= 0 ? '+' : ''}{crypto.change24h.toFixed(2)}%
                          </span>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}
                
                <div className={`text-center text-xs ${isDark ? 'text-gray-400' : 'text-gray-500'} mt-3`}>
                  Prices update every minute
                </div>
              </motion.div>
            ) : (
              <motion.div
                key="error"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
                className={`text-center py-4 ${isDark ? 'text-gray-400' : 'text-gray-500'}`}
              >
                Failed to load crypto data
              </motion.div>
            )}
          </AnimatePresence>
        </CardContent>
      </Card>
    </motion.div>
  );
}
