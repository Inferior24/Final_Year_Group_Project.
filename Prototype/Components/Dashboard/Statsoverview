import React, { useState, useEffect } from "react";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { motion } from "framer-motion";
import { 
  Activity, 
  Clock, 
  Zap, 
  TrendingUp,
  Wifi,
  Database
} from "lucide-react";

export default function StatsOverview({ isDark, refreshing }) {
  const [stats, setStats] = useState({
    totalRequests: 847,
    avgResponseTime: 234,
    successRate: 99.2,
    uptime: 99.9,
    dataPoints: 15420,
    activeApis: 9
  });

  const statCards = [
    {
      title: "API Requests",
      value: stats.totalRequests.toLocaleString(),
      icon: Activity,
      color: "from-blue-500 to-cyan-500",
      change: "+12%"
    },
    {
      title: "Avg Response",
      value: `${stats.avgResponseTime}ms`,
      icon: Clock,
      color: "from-green-500 to-emerald-500",
      change: "-5ms"
    },
    {
      title: "Success Rate",
      value: `${stats.successRate}%`,
      icon: TrendingUp,
      color: "from-purple-500 to-pink-500",
      change: "+0.1%"
    },
    {
      title: "Uptime",
      value: `${stats.uptime}%`,
      icon: Wifi,
      color: "from-orange-500 to-red-500",
      change: "100%"
    },
    {
      title: "Data Points",
      value: stats.dataPoints.toLocaleString(),
      icon: Database,
      color: "from-indigo-500 to-purple-500",
      change: "+234"
    },
    {
      title: "Active APIs",
      value: stats.activeApis,
      icon: Zap,
      color: "from-yellow-500 to-orange-500",
      change: "9/9"
    }
  ];

  useEffect(() => {
    if (refreshing) {
      // Simulate stats update
      const interval = setInterval(() => {
        setStats(prev => ({
          ...prev,
          totalRequests: prev.totalRequests + Math.floor(Math.random() * 5),
          avgResponseTime: 200 + Math.floor(Math.random() * 100),
          dataPoints: prev.dataPoints + Math.floor(Math.random() * 10)
        }));
      }, 100);

      setTimeout(() => clearInterval(interval), 2000);
    }
  }, [refreshing]);

  return (
    <div className="mb-8">
      <motion.div 
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4"
      >
        {statCards.map((stat, index) => (
          <motion.div
            key={stat.title}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="relative group"
          >
            <Card className={`${
              isDark 
                ? 'bg-white/5 border-white/10 backdrop-blur-xl hover:bg-white/10' 
                : 'bg-white/80 border-gray-200/50 backdrop-blur-xl hover:bg-white/90'
            } transition-all duration-300 overflow-hidden`}>
              {/* Gradient Background */}
              <div className={`absolute inset-0 bg-gradient-to-br ${stat.color} opacity-5 group-hover:opacity-10 transition-opacity duration-300`} />
              
              <CardContent className="p-4 relative">
                <div className="flex items-start justify-between">
                  <div className="space-y-1">
                    <p className={`text-xs font-medium ${
                      isDark ? 'text-gray-400' : 'text-gray-500'
                    }`}>
                      {stat.title}
                    </p>
                    <p className={`text-xl font-bold ${
                      isDark ? 'text-white' : 'text-gray-900'
                    } ${refreshing ? 'animate-pulse' : ''}`}>
                      {stat.value}
                    </p>
                  </div>
                  <div className={`p-2 rounded-lg bg-gradient-to-br ${stat.color} bg-opacity-20`}>
                    <stat.icon className={`w-4 h-4 text-white`} />
                  </div>
                </div>
                
                <div className="mt-2">
                  <Badge 
                    variant="outline" 
                    className={`text-xs ${
                      isDark 
                        ? 'border-green-500/30 text-green-400 bg-green-500/10' 
                        : 'border-green-400/50 text-green-600 bg-green-50'
                    }`}
                  >
                    {stat.change}
                  </Badge>
                </div>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </motion.div>
    </div>
  );
}
