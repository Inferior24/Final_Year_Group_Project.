import React, { useState } from "react";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Search, Loader2 } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function SearchInterface({ 
  searchQuery, 
  onSearch, 
  suggestions, 
  isDark, 
  isSearching 
}) {
  const [showSuggestions, setShowSuggestions] = useState(false);

  const handleInputChange = (e) => {
    const value = e.target.value;
    onSearch(value);
    setShowSuggestions(value.trim().length > 0);
  };

  const handleSuggestionClick = (suggestion) => {
    onSearch(suggestion.text);
    setShowSuggestions(false);
  };

  return (
    <div className="relative max-w-2xl mx-auto">
      <div className="relative">
        <Input
          type="text"
          placeholder="Search APIs by name, category, or use case..."
          value={searchQuery}
          onChange={handleInputChange}
          onFocus={() => setShowSuggestions(searchQuery.trim().length > 0)}
          onBlur={() => setTimeout(() => setShowSuggestions(false), 200)}
          className={`h-14 pl-12 pr-16 text-lg border-2 rounded-2xl ${
            isDark 
              ? 'bg-white/10 border-purple-500/30 text-white placeholder:text-gray-400 focus:border-purple-400 backdrop-blur-xl' 
              : 'bg-white/90 border-purple-200 text-gray-800 placeholder:text-gray-500 focus:border-purple-400 backdrop-blur-xl'
          } transition-all duration-300 focus:scale-105`}
        />
        
        <Search className={`absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 ${
          isDark ? 'text-gray-400' : 'text-gray-500'
        }`} />
        
        {isSearching && (
          <Loader2 className={`absolute right-4 top-1/2 transform -translate-y-1/2 w-5 h-5 animate-spin ${
            isDark ? 'text-purple-400' : 'text-purple-600'
          }`} />
        )}
      </div>

      {/* Search Suggestions */}
      <AnimatePresence>
        {showSuggestions && suggestions.length > 0 && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            className={`absolute top-full mt-2 w-full rounded-xl border ${
              isDark 
                ? 'bg-gray-900/95 border-purple-500/30 backdrop-blur-xl' 
                : 'bg-white/95 border-gray-200 backdrop-blur-xl'
            } shadow-2xl z-50`}
          >
            {suggestions.map((suggestion, index) => (
              <button
                key={index}
                onClick={() => handleSuggestionClick(suggestion)}
                className={`w-full flex items-center gap-3 p-4 text-left hover:bg-opacity-80 transition-colors duration-200 ${
                  index === 0 ? 'rounded-t-xl' : ''
                } ${
                  index === suggestions.length - 1 ? 'rounded-b-xl' : 'border-b'
                } ${
                  isDark 
                    ? 'hover:bg-purple-500/10 border-gray-700 text-gray-200' 
                    : 'hover:bg-purple-50 border-gray-100 text-gray-700'
                }`}
              >
                <suggestion.icon className={`w-4 h-4 ${
                  suggestion.type === 'api' 
                    ? (isDark ? 'text-cyan-400' : 'text-cyan-600')
                    : (isDark ? 'text-purple-400' : 'text-purple-600')
                }`} />
                <span className="font-medium">{suggestion.text}</span>
                <span className={`ml-auto text-xs px-2 py-1 rounded-full ${
                  suggestion.type === 'api'
                    ? (isDark ? 'bg-cyan-500/20 text-cyan-300' : 'bg-cyan-100 text-cyan-700')
                    : (isDark ? 'bg-purple-500/20 text-purple-300' : 'bg-purple-100 text-purple-700')
                }`}>
                  {suggestion.type}
                </span>
              </button>
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
}
